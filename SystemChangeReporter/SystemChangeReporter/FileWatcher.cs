using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Security.Permissions;
using System.Security.Cryptography;

namespace SystemMonitor
{
    class Watcher
    {

        private static String myLog;
        private static String myPath;

        [PermissionSet(SecurityAction.Demand, Name = "FullTrust")]
        public Watcher(String Path, String Log)
        {
            myLog = Log;
            myPath = Path;
            // Create a new FileSystemWatcher and set its properties.
            FileSystemWatcher watcher = new FileSystemWatcher();
            watcher.Path = myPath;
            //watcher.Path = Watcher.path; 
            /* Watch for changes in LastAccess and LastWrite times, and
               the renaming of files or directories. */
            watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite
               | NotifyFilters.FileName | NotifyFilters.DirectoryName;
            // Only watch text files.
            watcher.Filter = "*.*";//"*.txt";

            // Add event handlers.
            watcher.Changed += new FileSystemEventHandler(OnChanged);
            watcher.Created += new FileSystemEventHandler(OnChanged);
            watcher.Deleted += new FileSystemEventHandler(OnChanged);
            watcher.Renamed += new RenamedEventHandler(OnRenamed);

            // Begin watching.
            watcher.EnableRaisingEvents = true;
            watcher.IncludeSubdirectories = true;

            //RegistryEvent
        }

        // Define the event handlers. 
        private static void OnChanged(object source, FileSystemEventArgs e)
        {
            // Specify what is done when a file is changed, created, or deleted.
            WatcherChangeTypes wct = e.ChangeType;
            DirectoryInfo info = new DirectoryInfo(".");
            //String file = @info.FullName + myLog;
            String file = myLog;
            String text = e.ChangeType + ": " + e.FullPath;
            Console.WriteLine(text);
            if (File.Exists(file))
            {
                using (StreamWriter sw = File.AppendText(file))
                {
                    sw.WriteLine(text);
                }
            }
            else
            {
                using (StreamWriter sw = File.CreateText(file))
                {
                    sw.WriteLine(text);
                }
            }
        }

        private static void OnRenamed(object source, RenamedEventArgs e)
        {
            // Specify what is done when a file is renamed.
            String text = e.ChangeType + ": " + e.OldFullPath + ",\n" + e.FullPath;
            Console.WriteLine(text);
            DirectoryInfo info = new DirectoryInfo(".");
            //String file = @info.FullName + myLog;
            String file = myLog;
            if (File.Exists(file))
            {
                using (StreamWriter sw = File.AppendText(file))
                {
                    sw.WriteLine(text);
                }
            }
            else
            {
                using (StreamWriter sw = File.CreateText(file))
                {
                    sw.WriteLine(text);
                }
            }
        }
    }
}